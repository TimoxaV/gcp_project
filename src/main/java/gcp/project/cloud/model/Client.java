/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */

package gcp.project.cloud.model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Client extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -4623208562212174126L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
            .parse("{\"type\":\"record\",\"name\":\"Client\",\"namespace\":"
                    + "\"gcp.project.cloud.model\",\"fields\":[{\"name\":\"id\","
                    + "\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},"
                    + "{\"name\":\"phone\",\"type\":[\"string\",\"null\"]}"
                    + ",{\"name\":\"address\",\"type\":[\"string\",\"null\"]}]}");
    private static final org.apache.avro.io.DatumReader
            READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);
    private static final org.apache.avro.io.DatumWriter
            WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);
    @Deprecated
    public long id;
    @Deprecated
    public java.lang.CharSequence name;
    @Deprecated
    public java.lang.CharSequence phone;
    @Deprecated
    public java.lang.CharSequence address;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Client() {
    }

    /**
     * All-args constructor.
     *
     * @param id      The new value for id
     * @param name    The new value for name
     * @param phone   The new value for phone
     * @param address The new value for address
     */
    public Client(java.lang.Long id, java.lang.CharSequence name,
                  java.lang.CharSequence phone, java.lang.CharSequence address) {
        this.id = id;
        this.name = name;
        this.phone = phone;
        this.address = address;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field) {
        switch (field) {
            case 0:
                return id;
            case 1:
                return name;
            case 2:
                return phone;
            case 3:
                return address;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field, java.lang.Object value) {
        switch (field) {
            case 0:
                id = (java.lang.Long) value;
                break;
            case 1:
                name = (java.lang.CharSequence) value;
                break;
            case 2:
                phone = (java.lang.CharSequence) value;
                break;
            case 3:
                address = (java.lang.CharSequence) value;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'id' field.
     *
     * @return The value of the 'id' field.
     */
    public java.lang.Long getId() {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     *
     * @param value the value to set.
     */
    public void setId(java.lang.Long value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'name' field.
     *
     * @return The value of the 'name' field.
     */
    public java.lang.CharSequence getName() {
        return name;
    }

    /**
     * Sets the value of the 'name' field.
     *
     * @param value the value to set.
     */
    public void setName(java.lang.CharSequence value) {
        this.name = value;
    }

    /**
     * Gets the value of the 'phone' field.
     *
     * @return The value of the 'phone' field.
     */
    public java.lang.CharSequence getPhone() {
        return phone;
    }

    /**
     * Sets the value of the 'phone' field.
     *
     * @param value the value to set.
     */
    public void setPhone(java.lang.CharSequence value) {
        this.phone = value;
    }

    /**
     * Gets the value of the 'address' field.
     *
     * @return The value of the 'address' field.
     */
    public java.lang.CharSequence getAddress() {
        return address;
    }

    /**
     * Sets the value of the 'address' field.
     *
     * @param value the value to set.
     */
    public void setAddress(java.lang.CharSequence value) {
        this.address = value;
    }

    /**
     * Creates a new Client RecordBuilder.
     *
     * @return A new Client RecordBuilder
     */
    public static gcp.project.cloud.model.Client.Builder newBuilder() {
        return new gcp.project.cloud.model.Client.Builder();
    }

    /**
     * Creates a new Client RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new Client RecordBuilder
     */
    public static gcp.project.cloud.model.Client.Builder
            newBuilder(gcp.project.cloud.model.Client.Builder other) {
        return new gcp.project.cloud.model.Client.Builder(other);
    }

    /**
     * Creates a new Client RecordBuilder by copying an existing Client instance.
     *
     * @param other The existing instance to copy.
     * @return A new Client RecordBuilder
     */
    public static gcp.project.cloud.model.Client.Builder
            newBuilder(gcp.project.cloud.model.Client other) {
        return new gcp.project.cloud.model.Client.Builder(other);
    }

    /**
     * RecordBuilder for Client instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Client>
            implements org.apache.avro.data.RecordBuilder<Client> {

        private long id;
        private java.lang.CharSequence name;
        private java.lang.CharSequence phone;
        private java.lang.CharSequence address;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(gcp.project.cloud.model.Client.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.name)) {
                this.name = data().deepCopy(fields()[1].schema(), other.name);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.phone)) {
                this.phone = data().deepCopy(fields()[2].schema(), other.phone);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.address)) {
                this.address = data().deepCopy(fields()[3].schema(), other.address);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing Client instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(gcp.project.cloud.model.Client other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.name)) {
                this.name = data().deepCopy(fields()[1].schema(), other.name);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.phone)) {
                this.phone = data().deepCopy(fields()[2].schema(), other.phone);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.address)) {
                this.address = data().deepCopy(fields()[3].schema(), other.address);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Gets the value of the 'id' field.
         *
         * @return The value.
         */
        public java.lang.Long getId() {
            return id;
        }

        /**
         * Sets the value of the 'id' field.
         *
         * @param value The value of 'id'.
         * @return This builder.
         */
        public gcp.project.cloud.model.Client.Builder setId(long value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         *
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'id' field.
         *
         * @return This builder.
         */
        public gcp.project.cloud.model.Client.Builder clearId() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'name' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getName() {
            return name;
        }

        /**
         * Sets the value of the 'name' field.
         *
         * @param value The value of 'name'.
         * @return This builder.
         */
        public gcp.project.cloud.model.Client.Builder setName(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.name = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'name' field has been set.
         *
         * @return True if the 'name' field has been set, false otherwise.
         */
        public boolean hasName() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'name' field.
         *
         * @return This builder.
         */
        public gcp.project.cloud.model.Client.Builder clearName() {
            name = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'phone' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getPhone() {
            return phone;
        }

        /**
         * Sets the value of the 'phone' field.
         *
         * @param value The value of 'phone'.
         * @return This builder.
         */
        public gcp.project.cloud.model.Client.Builder setPhone(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.phone = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'phone' field has been set.
         *
         * @return True if the 'phone' field has been set, false otherwise.
         */
        public boolean hasPhone() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'phone' field.
         *
         * @return This builder.
         */
        public gcp.project.cloud.model.Client.Builder clearPhone() {
            phone = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'address' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getAddress() {
            return address;
        }

        /**
         * Sets the value of the 'address' field.
         *
         * @param value The value of 'address'.
         * @return This builder.
         */
        public gcp.project.cloud.model.Client.Builder setAddress(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.address = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'address' field has been set.
         *
         * @return True if the 'address' field has been set, false otherwise.
         */
        public boolean hasAddress() {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'address' field.
         *
         * @return This builder.
         */
        public gcp.project.cloud.model.Client.Builder clearAddress() {
            address = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        public Client build() {
            try {
                Client record = new Client();
                record.id = fieldSetFlags()[0] ? this.id
                        : (java.lang.Long) defaultValue(fields()[0]);
                record.name = fieldSetFlags()[1] ? this.name
                        : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.phone = fieldSetFlags()[2] ? this.phone
                        : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.address = fieldSetFlags()[3] ? this.address
                        : (java.lang.CharSequence) defaultValue(fields()[3]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }
}
